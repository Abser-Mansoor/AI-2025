{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 is the peak\n"
     ]
    }
   ],
   "source": [
    "def query(x) :\n",
    "    return -1 * (x - 7)**2 + 49\n",
    "\n",
    "def find_peak(n) :\n",
    "    low, high = 0, n\n",
    "    while (low < high) :\n",
    "        mid = (low + high) // 2\n",
    "        if (query(mid) < query(mid+1)) :\n",
    "            low = mid + 1\n",
    "        else :\n",
    "            high = mid\n",
    "    return high\n",
    "\n",
    "print(f\"{find_peak(200)} is the peak\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best route: ['Kalinin', 'Rostov', 'Dnieperpetrovsk', 'Kiev', 'Baku', 'Vladivostok', 'Leningrad', 'Moscow', 'Stalingrad', 'Mogilev']\n",
      "Best fitness: 0.003862004689711182\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import math\n",
    "\n",
    "CITIES = ['Kalinin', 'Stalingrad', 'Moscow', 'Kiev', 'Mogilev', 'Dnieperpetrovsk', 'Leningrad', 'Rostov', 'Baku', 'Vladivostok']\n",
    "CITIES_COORDS = { city: (random.randint(0,100), random.randint(0,100)) for city in CITIES}\n",
    "POPULATION_SIZE = 100\n",
    "GENERATIONS = 1000\n",
    "\n",
    "def euclidean_dist(city1, city2) :\n",
    "    return math.sqrt((CITIES_COORDS[city2][0] - CITIES_COORDS[city1][0]) ** 2 + (CITIES_COORDS[city2][1] - CITIES_COORDS[city1][1]) ** 2)\n",
    "\n",
    "def generate_individual() :\n",
    "    return random.sample(CITIES, len(CITIES))\n",
    "\n",
    "# A greater decimal means a better solution\n",
    "def fitness(individual) :\n",
    "    return 1 / sum(euclidean_dist(individual[i], individual[i+1]) for i in range(len(individual)-1))\n",
    "\n",
    "def tournament_selection(population) :\n",
    "    tournament = random.sample(population, k=5)\n",
    "    return max(tournament, key=fitness)\n",
    "\n",
    "def ordered_crossover(parent1, parent2):\n",
    "    size = len(parent1)\n",
    "    start, end = sorted(random.sample(range(size), 2))\n",
    "    child = [None] * size\n",
    "    child[start:end] = parent1[start:end]\n",
    "    remaining_cities = [city for city in parent2 if city not in child]\n",
    "    child = [remaining_cities.pop(0) if city is None else city for city in child]\n",
    "    return child\n",
    "\n",
    "def swap_mutation(child, mutation_rate=0.3) :\n",
    "    if random.random() < mutation_rate :\n",
    "        idx1,idx2 = random.sample(range(len(child)),2)\n",
    "        child[idx1], child[idx2] = child[idx2], child[idx1]\n",
    "    return child\n",
    "\n",
    "def genetic_algorithm_TSP() :\n",
    "    population = [generate_individual() for _ in range(POPULATION_SIZE)]\n",
    "    for generation in range(GENERATIONS) :\n",
    "        new_pop = []\n",
    "        for _ in range(POPULATION_SIZE // 2) :\n",
    "            parent1 = tournament_selection(population)\n",
    "            parent2 = tournament_selection(population)\n",
    "            child1 = ordered_crossover(parent1, parent2)\n",
    "            child2 = ordered_crossover(parent2, parent1)\n",
    "            child1 = swap_mutation(child1)\n",
    "            child2 = swap_mutation(child2)\n",
    "            new_pop.append(child1)\n",
    "            new_pop.append(child2)\n",
    "        population = new_pop\n",
    "    best_route = max(population, key=fitness)\n",
    "    return best_route, fitness(best_route)\n",
    "\n",
    "best_route, best_fitness = genetic_algorithm_TSP()\n",
    "print(f\"Best route: {best_route}\")\n",
    "print(f\"Best fitness: {best_fitness}\")\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
